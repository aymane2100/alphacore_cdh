import time, requests


from requests.adapters import HTTPAdapter
from requests.models import Response
from requests.sessions import Session

from urllib3.util import Retry
from alphacore_cdh.config import Config as cfg

class Alphacore:
    "Client used to interact with Alphacore API. The requests contains a bearer token generated by OKTA service"

    def __init__(self, env:str='DEV'):
        """
        Args:
            env (str, optional): dev or prod for Okta & Alphacore. Defaults to 'dev'.
        """
        env = env.upper()

        # Access token used for authentification
        self.token = None
        self._token_retrieval_time = 10 ^ 10

        # Okta
        self.okta_iss = cfg.get_item("okta_prod", "iss") if env == 'PROD' else cfg.get_item("okta", "iss")
        self.okta_client_id = cfg.get_item("okta_prod", "client_id") if env == 'PROD' else cfg.get_item("okta", "client_id")
        self.okta_pswd = cfg.get_item("okta_prod", "pswd") if env == 'PROD' else cfg.get_item("okta", "pswd")
        
        # Url to be used when calling alphacore endpoints
        self.base_url = cfg.get_item("alphacore", "url_prod") if env == 'PROD' else cfg.get_item("alphacore", "url")

        # Alternative session method with retry mechanism
        self.session = self.requests_retry_session()

    def requests_retry_session(
        self,
        retries=2,
        backoff_factor=3,
        status_forcelist=(401, 403, 404, 500, 502, 503, 504),
        session=None,
    ) -> Session:

        session = session or requests.Session()
        retry = Retry(
            total=retries,
            read=retries,
            connect=retries,
            backoff_factor=backoff_factor,
            status_forcelist=status_forcelist,
        )
        adapter = HTTPAdapter(max_retries=retry)
        session.mount("https://", adapter)
        return session

    def _get_access_token(self) -> str:
        """ Retrieve a Jefe access token with api.alphacore scope to communicate with Alphacore API

        Raises:
            Exception: If token can't be retrieved

        Returns:
            str: Access token
        """        
        
        ""

        # 1. Check if access token has expired
        elapsed_time = time.time() - self._token_retrieval_time
        if not elapsed_time > 3600:
            return self.token

        self._token_retrieval_time = time.time()

        # 2. Retrieve access token
        response: Response = self.session.post(
            url=self.okta_iss + "/v1/token",
            auth=(self.okta_client_id, self.okta_pswd),
            data={"grant_type": "client_credentials", "scope": "api.alphacore"},
            verify=True,
        )

        if not response.ok:
            raise Exception("Alphacore client - Failed to get jefe access token")

        data = response.json()
        self.token = data["access_token"]

    def _send_get_request(
        self, endpoint: str = "shared/auctions", parameters: dict = {}
    ):
        """GET request to alphacore API

        :param endpoint:
        :param parameters: Dict with params for the corresponding endpoint (rf: swagger)

        """

        # 1. Retrieve/refresh access token
        self._get_access_token()

        # 2. Send request
        response: Response = self.session.get(
            f"{self.base_url}{endpoint}",
            proxies={"http://": None, "https://": None},
            verify=False,
            headers={"Authorization": "Bearer {}".format(self.token)},
            params=parameters,
            timeout=120,
        )

        response.raise_for_status()

        if response.text:
            return response.json()

        return None

    def _send_post_request(
        self, endpoint: str, data, parameters: dict = {}
    ):
        """POST request to alphacore API

        :param endpoint:
        :param data: Json like object to send as json in the post request
        :param parameters: Dict with params for the corresponding endpoint (rf: swagger)

        """

        # 1. Retrieve/refresh access token
        self._get_access_token()
        url = f"{self.base_url}{endpoint}"

        # 2. Send request
        response: Response = self.session.post(
            url=f"{self.base_url}{endpoint}",
            proxies={"http://": None, "https://": None},
            verify=False,
            headers={"Authorization": "Bearer {}".format(self.token)},
            params=parameters,
            json=data,
            timeout=120,
        )

        response.raise_for_status()

        if response.text:
            return response.json()

        return None

    def get_auctions(
        self,
        platform="RTE",
        product_type="MFRR",
        auction_status=None,
        delivery_date=None,
        resolution=None,
        iteration_number=None,
    ) -> list:
        "Retrieve list of all auctions"

        endpoint = "/shared/auctions"
        params = {
            "auction_status": auction_status,
            "platform": platform,
            "product_type": product_type,
            "delivery_date": delivery_date,
            "resolution": resolution,
            "iteration_number": iteration_number,
        }

        return self._send_get_request(endpoint=endpoint, parameters=params)

    def get_rte_afrr_full_results(
        self, auction_id: str, client_id: str = None, product_direction: str = None
    ) -> dict or None:
        "Retrieve RTE aFRR full results (not recommanded better use hourly_results)"

        endpoint = "/rte/afrr/results"
        params = {
            "auction_id": auction_id,
            "client_id": client_id,
            "product_direction": product_direction,
        }
        return self._send_get_request(endpoint=endpoint, parameters=params)

    def get_rte_afrr_hourly_results(
        self, auction_id: str, client_id: str = None, product_direction: str = None
    ) -> dict:
        "Retrieve aFRR Hourly results"

        endpoint = "/rte/afrr/results_hour"
        params = {
            "auction_id": auction_id,
            "client_id": client_id,
            "product_direction": product_direction,
        }
        return self._send_get_request(endpoint=endpoint, parameters=params)

    def get_rte_mfrr_results(
        self, auction_id: str, client_id: str = None, product_direction: str = None
    ) -> dict:
        "Retrieve mFRR results"

        endpoint = "/rte/mfrr/results"
        params = {
            "auction_id": auction_id,
            "client_id": client_id,
            "product_direction": product_direction,
        }

        return self._send_get_request(endpoint=endpoint, parameters=params)

    def get_rte_rr_results(
        self, auction_id: str, client_id: str = None, product_direction: str = None
    ) -> dict:
        "Retrieve rr results"

        endpoint = "/rte/rr/results"
        params = {
            "auction_id": auction_id,
            "client_id": client_id,
            "product_direction": product_direction,
        }

        return self._send_get_request(endpoint=endpoint, parameters=params)

    def post_regel_fcr_bids(self, bids, client_id: str, delivery_date: str):
        "Send REGEL FCR bids"
        endpoint = "/regel/fcr/bids"
        params = {
            'client_id': client_id,
            'auction_delivery_date': delivery_date,
        }
        return self._send_post_request(data=bids, endpoint=endpoint, parameters=params)

    def post_regel_mfrr_bids(self, bids, client_id: str, delivery_date: str):
        "Send REGEL FCR bids"
        endpoint = "/regel/mfrr/bids"
        params = {
            'client_id': client_id,
            'auction_delivery_date': delivery_date,
        }
        return self._send_post_request(data=bids, endpoint=endpoint, parameters=params)

    def get_regel_fcr_results(
        self, auction_id: str, client_id: str = None
    ) -> dict:
        "Retrieve REGEL FCR results"

        endpoint = "/regel/fcr/results"
        params = {
            "auction_id": auction_id,
            "client_id": client_id,
        }

        return self._send_get_request(endpoint=endpoint, parameters=params)

    def get_regel_afrr_results(
        self, auction_id: str, client_id: str = None
    ) -> dict:
        "Retrieve REGEL AFRR results"

        endpoint = "/regel/afrr/results"
        params = {
            "auction_id": auction_id,
            "client_id": client_id,
        }

        return self._send_get_request(endpoint=endpoint, parameters=params)

    def get_regel_mfrr_results(
        self, auction_id: str, client_id: str = None
    ) -> dict:
        "Retrieve REGEL MFRR results"

        endpoint = "/regel/mfrr/results"
        params = {
            "auction_id": auction_id,
            "client_id": client_id,
        }

        return self._send_get_request(endpoint=endpoint, parameters=params)


if __name__ == "__main__":
    alphacore_client = Alphacore(env='PROD')

    # resp_auctions = alphacore_client.get_auctions(product_type="AFRR")
    # response_mfrr = alphacore_client.get_rte_mfrr_results("RTE_MFRR_2021-09-28_24_1")
    response_afrr = alphacore_client.get_rte_afrr_hourly_results(
        "RTE_AFRR_2021-11-03_24_1", 'PDA'
    )
